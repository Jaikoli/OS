FITS CODE:

#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

struct MemoryBlock
{
    int id;
    int size;
    bool allocated;
};

// Function to allocate memory using First Fit technique
void firstFit(vector<MemoryBlock> &memory, int blockSize, int id)
{
    for (int i = 0; i < memory.size(); ++i)
    {
        if (!memory[i].allocated && memory[i].size >= blockSize)
        {
            memory[i].allocated = true;
            memory[i].id = id;
            cout << "Memory block " << id << " allocated at position " << i << endl;
            return;
        }
    }
    cout << "Memory block " << id << " cannot be allocated." << endl;
}

// Function to allocate memory using Best Fit technique
void bestFit(vector<MemoryBlock> &memory, int blockSize, int id)
{
    int bestFitIndex = -1;
    int minFragmentation = INT_MAX;
    for (int i = 0; i < memory.size(); ++i)
    {
        if (!memory[i].allocated && memory[i].size >= blockSize)
        {
            int fragmentation = memory[i].size - blockSize;
            if (fragmentation < minFragmentation)
            {
                minFragmentation = fragmentation;
                bestFitIndex = i;
            }
        }
    }
    if (bestFitIndex != -1)
    {
        memory[bestFitIndex].allocated = true;
        memory[bestFitIndex].id = id;
        cout << "Memory block " << id << " allocated at position " << bestFitIndex << endl;
    }
    else
    {
        cout << "Memory block " << id << " cannot be allocated." << endl;
    }
}

// Function to allocate memory using Next Fit technique
void nextFit(vector<MemoryBlock> &memory, int blockSize, int id, int &nextFitIndex)
{
    for (int i = nextFitIndex; i < memory.size(); ++i)
    {
        if (!memory[i].allocated && memory[i].size >= blockSize)
        {
            memory[i].allocated = true;
            memory[i].id = id;
            cout << "Memory block " << id << " allocated at position " << i << endl;
            nextFitIndex = i + 1;
            return;
        }
    }
    // Wrap around if not found from nextFitIndex to end
    for (int i = 0; i < nextFitIndex; ++i)
    {
        if (!memory[i].allocated && memory[i].size >= blockSize)
        {
            memory[i].allocated = true;
            memory[i].id = id;
            cout << "Memory block " << id << " allocated at position " << i << endl;
            nextFitIndex = i + 1;
            return;
        }
    }
    cout << "Memory block " << id << " cannot be allocated." << endl;
}

// Function to allocate memory using Worst Fit technique
void worstFit(vector<MemoryBlock> &memory, int blockSize, int id)
{
    int worstFitIndex = -1;
    int maxFragmentation = INT_MIN;
    for (int i = 0; i < memory.size(); ++i)
    {
        if (!memory[i].allocated && memory[i].size >= blockSize)
        {
            int fragmentation = memory[i].size - blockSize;
            if (fragmentation > maxFragmentation)
            {
                maxFragmentation = fragmentation;
                worstFitIndex = i;
            }
        }
    }
    if (worstFitIndex != -1)
    {
        memory[worstFitIndex].allocated = true;
        memory[worstFitIndex].id = id;
        cout << "Memory block " << id << " allocated at position " << worstFitIndex << endl;
    }
    else
    {
        cout << "Memory block " << id << " cannot be allocated." << endl;
    }
}

int main()
{
    int memorySize, blockSize;
    cout << "Enter total memory size: ";
    cin >> memorySize;
    cout << "Enter number of memory blocks: ";
    int numBlocks;
    cin >> numBlocks;
    vector<MemoryBlock> memory(numBlocks);
    for (int i = 0; i < numBlocks; ++i)
    {
        cout << "Enter size of block " << i + 1 << ": ";
        cin >> memory[i].size;
        memory[i].allocated = false;
    }

    int choice;
    do
    {
        cout << "\nMemory Allocation Techniques:\n";
        cout << "1. First Fit\n";
        cout << "2. Best Fit\n";
        cout << "3. Next Fit\n";
        cout << "4. Worst Fit\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice)
        {
        case 1:
            cout << "Enter size of block to allocate: ";
            cin >> blockSize;
            firstFit(memory, blockSize, choice);
            break;
        case 2:
            cout << "Enter size of block to allocate: ";
            cin >> blockSize;
            bestFit(memory, blockSize, choice);
            break;
        case 3:
            cout << "Enter size of block to allocate: ";
            cin >> blockSize;
            nextFit(memory, blockSize, choice, choice);
            break;
        case 4:
            cout << "Enter size of block to allocate: ";
            cin >> blockSize;
            worstFit(memory, blockSize, choice);
            break;
        case 5:
            cout << "Exiting...\n";
            break;
        default:
            cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 5);

    return 0;
}



PAGE REPLACEMENT ALGO CODE:

FIFO.C

// C program for FIFO page replacement algorithm
#include <stdio.h>
int main()
{
    int incomingStream[] = {4, 1, 2, 4, 5};
    int pageFaults = 0;
    int frames = 3;
    int m, n, s, pages;

    pages = sizeof(incomingStream) / sizeof(incomingStream[0]);

    printf("Incoming \t\t\t Frame 1 \t\t\t Frame 2 \t\t\t Frame 3");
    int temp[frames];
    for (m = 0; m < frames; m++)
    {
        temp[m] = -1;
    }

    for (m = 0; m < pages; m++)
    {
        s = 0;

        for (n = 0; n < frames; n++)
        {
            if (incomingStream[m] == temp[n])
            {
                s++;
                pageFaults--;
            }
        }
        pageFaults++;

        if ((pageFaults <= frames) && (s == 0))
        {
            temp[m] = incomingStream[m];
        }
        else if (s == 0)
        {
            temp[(pageFaults - 1) % frames] = incomingStream[m];
        }

        printf("\n");
        printf("%d\t\t\t", incomingStream[m]);
        for (n = 0; n < frames; n++)
        {
            if (temp[n] != -1)
                printf(" %d\t\t\t", temp[n]);
            else
                printf(" - \t\t\t");
        }
    }

    printf("\nTotal Page Faults:\t%d\n", pageFaults);
    return 0;
}

LRU.C

// C program for FIFO page replacement algorithm
#include <stdio.h>
int main()
{
    int incomingStream[] = {4, 1, 2, 4, 5};
    int pageFaults = 0;
    int frames = 3;
    int m, n, s, pages;

    pages = sizeof(incomingStream) / sizeof(incomingStream[0]);

    printf("Incoming \t\t\t Frame 1 \t\t\t Frame 2 \t\t\t Frame 3");
    int temp[frames];
    for (m = 0; m < frames; m++)
    {
        temp[m] = -1;
    }

    for (m = 0; m < pages; m++)
    {
        s = 0;

        for (n = 0; n < frames; n++)
        {
            if (incomingStream[m] == temp[n])
            {
                s++;
                pageFaults--;
            }
        }
        pageFaults++;

        if ((pageFaults <= frames) && (s == 0))
        {
            temp[m] = incomingStream[m];
        }
        else if (s == 0)
        {
            temp[(pageFaults - 1) % frames] = incomingStream[m];
        }

        printf("\n");
        printf("%d\t\t\t", incomingStream[m]);
        for (n = 0; n < frames; n++)
        {
            if (temp[n] != -1)
                printf(" %d\t\t\t", temp[n]);
            else
                printf(" - \t\t\t");
        }
    }

    printf("\nTotal Page Faults:\t%d\n", pageFaults);
    return 0;
}

OPTI.C

#include <stdio.h>
int main()
{
    int flag1, flag2, flag3, i, j, k, position, max, faults = 0;
    int num_frames = 3;

    int frames[num_frames];
    int temp[num_frames];

    int inputStream[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2, 1, 2, 0, 1, 7, 0, 1};

    int num_pages = sizeof(inputStream) / sizeof(inputStream[0]);

    for (i = 0; i < num_frames; i++)
    {
        frames[i] = -1;
    }

    for (i = 0; i < num_pages; i++)
    {

        flag1 = flag2 = 0;

        for (j = 0; j < num_frames; j++)
        {
            if (frames[j] == inputStream[i])
            {
                flag1 = flag2 = 1;
                break;
            }
        }

        if (flag1 == 0)
        {
            for (j = 0; j < num_frames; j++)
            {
                if (frames[j] == -1)
                {
                    faults++;
                    frames[j] = inputStream[i];
                    flag2 = 1;
                    break;
                }
            }
        }

        if (flag2 == 0)
        {
            flag3 = 0;

            for (j = 0; j < num_frames; j++)
            {
                temp[j] = -1;

                for (k = i + 1; k < num_pages; k++)
                {
                    if (frames[j] == inputStream[k])
                    {
                        temp[j] = k;
                        break;
                    }
                }
            }

            for (j = 0; j < num_frames; j++)
            {
                if (temp[j] == -1)
                {
                    position = j;
                    flag3 = 1;
                    break;
                }
            }

            if (flag3 == 0)
            {
                max = temp[0];
                position = 0;

                for (j = 1; j < num_frames; j++)
                {
                    if (temp[j] > max)
                    {
                        max = temp[j];
                        position = j;
                    }
                }
            }

            frames[position] = inputStream[i];
            faults++;
        }

        printf("\n");

        for (j = 0; j < num_frames; j++)
        {
            printf("%d\t", frames[j]);
        }
    }

    printf("\n\nTotal Page Faults = %d", faults);
    printf("\nTotal Hits = %d", num_pages - faults);

    return 0;
}

DISK SCHEDULINGE.CPP

#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

int FIFO(int req[], int n, int head)
{
    int primary_movement = abs(req[0] - head);
    int total = 0;
    for (int i = 0; i < n - 1; i++)
    {
        total += abs(req[i] - req[i + 1]);
    }
    return primary_movement + total;
}

int SSTF(int req[], int n, int head)
{
    int total = 0;
    vector<int> requests(req, req + n);
    vector<bool> visited(n, false);

    for (int i = 0; i < n; ++i)
    {
        int temp = 9999999;
        int ci = -1;
        for (int j = 0; j < n; ++j)
        {
            if (!visited[j] && abs(head - requests[j]) < temp)
            {
                temp = abs(head - requests[j]);
                ci = j;
            }
        }
        visited[ci] = true;
        total += temp;
        head = requests[ci];
    }
    return total;
}

int SCAN(int req[], int n, int md, int head, int dir)
{
    int ans = 0;
    if (dir == 0)
    {
        int a = abs(md - head);
        int minval = 999999;
        for (int i = 0; i < n; i++)
        {
            if (req[i] < minval)
            {
                minval = req[i];
            }
        }
        int b = abs(md - minval);
        int c = a + b;
        ans = c;
    }
    else if (dir == 1)
    {
        int a = abs(head);
        int maxval = 0;
        for (int i = 0; i < n; i++)
        {
            if (req[i] > maxval)
            {
                maxval = req[i];
            }
        }
        int b = abs(maxval);
        int c = a + b;
        ans = c;
    }
    return ans;
}

int CSCAN(int req[], int n, int md, int head, int dir)
{
    int ans = 0;
    // right
    if (dir == 0)
    {
        int temp = 0;
        for (int i = 0; i < n; i++)
        {
            if (req[i] < head && req[i] > temp)
            {
                temp = req[i];
            }
        }
        int a = abs(head - md);
        int c = a + md + temp;
        ans = c;
    }
    // left
    else if (dir == 1)
    {
        int temp = 999999;
        for (int i = 0; i < n; i++)
        {
            if (req[i] > head && req[i] < temp)
            {
                temp = req[i];
            }
        }
        int c = head + md + temp;
        ans = c;
    }
    return ans;
}

int main()
{
    int r_size = 7;
    int requests[] = {82, 170, 43, 140, 24, 16, 190};
    int requests2[] = {176, 79, 34, 60, 92, 11, 41, 114};
    int head = 50;
    int max_diskSize = 199;

    cout << "FIFO: " << FIFO(requests, r_size, head) << endl;
    cout << "SSTF: " << SSTF(requests, r_size, head) << endl;
    // 0 means right, 1 means left
    cout << "SCAN: " << SCAN(requests, r_size, max_diskSize, head, 0) << endl;
    cout << "SCAN: " << SCAN(requests2, r_size, max_diskSize, head, 1) << endl;
    cout << "C-SCAN: " << CSCAN(requests, r_size, max_diskSize, head, 0) << endl;
    cout << "C-SCAN: " << CSCAN(requests2, r_size, max_diskSize, head, 0) << endl;
    return 0;
}